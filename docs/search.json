[
  {
    "objectID": "10-using-reticulate.html",
    "href": "10-using-reticulate.html",
    "title": "10  פיית’ון מתוך R",
    "section": "",
    "text": "10.1 התקנת סביבה\nעל מנת שתוכלו לקרוא לפיית’ון מתוך R, ראשית צריך להתקין סביבת פיית’ון. פעולה זו תתבצע בפעם הראשונה בלבד (אלא אם תעברו לעבוד במחשב אחר), באמצעות פקודות של חבילת reticulate. לשם כך ישנן שתי פקודות אפשריות:\nההבדל ביניהן הוא הכלי שבו יעשה שימוש להתקנה (Conda מול pip).\nאם ניסיתם להשתמש בפקודה conda_create וקיבלתם הודעת שגיאה “Unable to find conda binary. Is Anaconda installed?”, נדרש קודם להתקין את miniconda על ידי שימוש בפקודה reticulate::install_miniconda, או התקנה ישירה מהאתר הרשמי של חברת Anaconda.\nשימו לב שאת פקודת ההפעלה (use_*) יש להפעיל ראשונה, לפני שמפעילים פקודה אחרת של פיית’ון, אחרת reticulate עשוי לבחור בסביבה אחרת זמינה, לפי לוגיקה פנימית (והיא לאו דווקא תהיה הסביבה שאתם מתכוונים, במידה והיתה סביבה אחרת מותקנת).\nבמידה ופקודה זו לא עבדה כנדרש, ונטענת סביבה אחרת, ניתן גם להשתמש בהגדרת משתנה סביבה (Environment Variable), על ידי שימוש בפקודה Sys.setenv(RETICULATE_PYTHON = PATH) או על ידי הגדרה בקובץ .Renviron בתיקיית העבודה שלכם, עם השורה המתאימה RETICULATE_PYTHON = PATH .\nכעת ניתן להריץ קוד פיית’ון ישירות:\npy_run_string(\"\nprint('Hi, I\\\\'m python code, run directly from an R interpreter!')\n\")\n\nHi, I'm python code, run directly from an R interpreter!",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>פיית'ון מתוך R</span>"
    ]
  },
  {
    "objectID": "10-using-reticulate.html#התקנת-סביבה",
    "href": "10-using-reticulate.html#התקנת-סביבה",
    "title": "10  פיית’ון מתוך R",
    "section": "",
    "text": "virtualenv_create\nconda_create\n\n\n\n\n# Using Conda\nlibrary(reticulate)\nconda_create(\n    envname = \"my_conda_env\", \n    packages = c(\"pandas\")) \n# (add libraries to `packages` argument as needed)\n\n# Activate the environment\nuse_condaenv(\"my_conda_env\")\n\n\n# Using virtual environment (pip)\nlibrary(reticulate)\nvirtualenv_create(\n    envname = \"my_virtual_env\", \n    packages = c(\"pandas\")) \n# (add libraries to `packages` argument as needed)\n\n# Activate the environment\nuse_virtualenv(\"my_virtual_env\")",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>פיית'ון מתוך R</span>"
    ]
  },
  {
    "objectID": "10-using-reticulate.html#תרגום-בין-אובייקטים",
    "href": "10-using-reticulate.html#תרגום-בין-אובייקטים",
    "title": "10  פיית’ון מתוך R",
    "section": "10.2 תרגום בין אובייקטים",
    "text": "10.2 תרגום בין אובייקטים\nב-R ובפיית’ון יש אובייקטים מסוגים שונים. כדי שנוכל למנף את השילוביות בין שתי השפות כדאי להבין כיצד אובייקטים מתורגמים מאחד לשני. הטבלה הבאה מציגה כיצד אובייקטים עוברים מאחד לשני:\n\nטבלת המרה בין אובייקטים ב-R וב-python\n\n\n\n\n\n\nR\npython\n\n\n\n\nוקטור עם איבר יחיד el &lt;- 5\nסקלר el=5\n\n\nוקטור עם מספר איברים vec &lt;- c(1, 2, 3)\nרשימה vec=[1, 2, 3]\n\n\nרשימה משוימת (named) עם איברים מסוגים שונים\nlst &lt;- list(a = 5, b = list(1, 2, 3))\nאובייקט מסוג מילון\nlst={'a' : 5, 'b' : [1, 2, 3]}\n\n\nרשימה לא משוימת עם איברים מסוגים שונים\nlst_unnamed &lt;- list(1, 2, list(3, 4))\nרשימה\nlst_unamed=[1, 2, [3, 4]]\n\n\nניתן להשתמש בפקודה\ntup &lt;- reticulate::tuple(1, 2, 3)\nבכיוון הפוך (בחזרה מפייתון) היא מומרת לרשימה לא משוימת\nlist(1, 2, 3)\ntuple\ntup=(1, 2, 3)\n\n\nמטריצה\n&gt; matrix(1:10, 2, 5)\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    3    5    7    9\n[2,]    2    4    6    8   10\nמערך של NumPy\narray([[ 1,  3,  5,  7,  9],\n       [ 2,  4,  6,  8, 10]], dtype=int32)\n\n\ndata frame או tibble\ndata frame של חבילת pandas\n\n\n\nניתן להשתמש בפקודה r_to_py ובפקודה py_to_r על מנת לעבור בין אובייקטים. לדוגמה:\n\nr_to_py(palmerpenguins::penguins)\n\n       species     island  bill_length_mm  ...  body_mass_g     sex  year\n0       Adelie  Torgersen            39.1  ...         3750    male  2007\n1       Adelie  Torgersen            39.5  ...         3800  female  2007\n2       Adelie  Torgersen            40.3  ...         3250  female  2007\n3       Adelie  Torgersen             NaN  ...  -2147483648     NaN  2007\n4       Adelie  Torgersen            36.7  ...         3450  female  2007\n..         ...        ...             ...  ...          ...     ...   ...\n339  Chinstrap      Dream            55.8  ...         4000    male  2009\n340  Chinstrap      Dream            43.5  ...         3400  female  2009\n341  Chinstrap      Dream            49.6  ...         3775    male  2009\n342  Chinstrap      Dream            50.8  ...         4100    male  2009\n343  Chinstrap      Dream            50.2  ...         3775  female  2009\n\n[344 rows x 8 columns]",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>פיית'ון מתוך R</span>"
    ]
  },
  {
    "objectID": "10-using-reticulate.html#שילוב-קוד-פייתון-בסקריפט",
    "href": "10-using-reticulate.html#שילוב-קוד-פייתון-בסקריפט",
    "title": "10  פיית’ון מתוך R",
    "section": "10.3 שילוב קוד פיית’ון בסקריפט",
    "text": "10.3 שילוב קוד פיית’ון בסקריפט\nלאחר שהפעלנו את סביבת הפיית’ון הרצויה, ניתן לקרוא חבילות (במידה והותקנו במסגרת בניית הסביבה הוירטואלית), באמצעות הפקודה import מתוך חבילת reticulate, ואז להשתמש בפקודות שזמינות בחבילות שקראנו.\nהקריאה לפקודה מתוך חבילה מסוימת תתבצע באמצעות התו $.\nנדגים זאת על ידי שימוש בפקודות מתוך pandas:\n\npd &lt;- import(\"pandas\")\nspecies_count &lt;- pd$value_counts(palmerpenguins::penguins$species)\nspecies_count\n\n   Adelie    Gentoo Chinstrap \n      152       124        68 \n\n# And another option is to use this:\npenguins_py &lt;- r_to_py(palmerpenguins::penguins)\n\n# Demonstrating grouping, counts, then proportions\n# Group penguins by island and species\ngrouped &lt;- penguins_py$groupby(list('island', 'species'))$size()$reset_index(name='counts')\n\n# Calculate proportions for each species on each island\ngrouped['proportion'] &lt;- grouped$groupby('island')['counts']$transform(function(x) x / x$sum())\n\n# Convert the Pandas DataFrame back to an R dataframe (optional)\ngrouped_r &lt;- py_to_r(grouped)\n\ngrouped_r\n\n     island   species counts proportion\n1    Biscoe    Adelie     44  0.2619048\n2    Biscoe Chinstrap      0  0.0000000\n3    Biscoe    Gentoo    124  0.7380952\n4     Dream    Adelie     56  0.4516129\n5     Dream Chinstrap     68  0.5483871\n6     Dream    Gentoo      0  0.0000000\n7 Torgersen    Adelie     52  1.0000000\n8 Torgersen Chinstrap      0  0.0000000\n9 Torgersen    Gentoo      0  0.0000000\n\n\nהפקודה py_to_r מעבירה את התוצאות חזרה לאובייקטים של R, וניתן לעבוד איתם באופן רגיל. במקרה זה האובייקט grouped_r הוא מסוג data.frame.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>פיית'ון מתוך R</span>"
    ]
  },
  {
    "objectID": "10-using-reticulate.html#סיכום",
    "href": "10-using-reticulate.html#סיכום",
    "title": "10  פיית’ון מתוך R",
    "section": "10.4 סיכום",
    "text": "10.4 סיכום\nבפרק זה עסקנו בשילוב בין שפת פיית’ון לבין R באמצעות חבילת reticulate. שילוב זה מאפשר לנצל את היתרונות של כל אחת מהשפות. אני באופן אישי מעדיף להשתמש בעיקר ב-R, במיוחד בכל המקרים של ניתוח נתונים “קלאסי” (כל מה שמכוסה בפרקים השונים של ספר זה).\nהמקרים בהם יש יתרון לשימוש בפיית’ון באמצעות reticulate הם כאשר ישנה חבילה מסוימת שהיא יותר “בשלה” או מתוחזקת היטב בפיית’ון אבל המקבילה שלה ב-R אינה קיימת, או מתוחזקת באופן חלקי/לא מספק.\nראינו כיצד מתקינים סביבת פיית’ון באמצעות פקודות של reticulate, כיצד אובייקטים עוברים המרה משפה לשפה, וכיצד לשלב קוד פיית’ון בתוך סקריפט של R.\nבפרק הבא נראה דוגמה פרקטית נוספת של שימוש בספריית openai של פיית’ון, להפעלת מודלי LLM של חברת OpenAI.\n\n\n\nהמדריך העברי למשתמש ב-R נכתב על ידי עדי שריד בהוצאת מכון שריד",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>פיית'ון מתוך R</span>"
    ]
  },
  {
    "objectID": "11-using-llms.html",
    "href": "11-using-llms.html",
    "title": "11  הפעלת מודלי שפה (LLMs)",
    "section": "",
    "text": "11.1 התקנת ellmer\nישנה תיאוריה ופרקטיקה נרחבת על אופן השימוש, ההפעלה, וההתאמה של מודלים לצרכים שונים. בפרק זה נדגים את השימוש בחבילה שנקראת ellmer ומאפשרת להתממשק מתוך R למנעד של מודלים נפוצים. נדגים את השימוש בחבילה באמצעות מודלי Open AI, אך באופן דומה ניתן להשתמש בהתממשקות עם מודלים של ספקים אחרים.\nנציין גם שטכניקה נוספת אפשרית היא להשתמש בחבילת openai של R, ואפשר גם להשתמש בחבילות Python ייעודיות על ידי התממשקות של חבילת reticulate שאותה ראינו בפרק הקודם.\nכאמור, נמשיך את ההדגמה בחבילת ellmer. בעת כתיבת שורות אלו, החבילה אינה זמינה ב-CRAN ועל מנת להתקינה יש להשתמש בחבילת remotes באופן הבא:\nremotes::install_github('tidyverse/ellmer')\n# When the package will be deployed to CRAN use instead:\n# install.packages('ellmer')\nlibrary(ellmer)",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>הפעלת מודלי שפה (LLMs)</span>"
    ]
  },
  {
    "objectID": "11-using-llms.html#הגדרת-המפתחות",
    "href": "11-using-llms.html#הגדרת-המפתחות",
    "title": "11  הפעלת מודלי שפה (LLMs)",
    "section": "11.2 הגדרת המפתחות",
    "text": "11.2 הגדרת המפתחות\nלפני שאנחנו מתחילים לעבוד עם החבילה, מומלץ לפתוח קובץ עם סיומת Renviron בתיקיית העבודה, שיכיל את המפתחות הנדרשים להפעלה של ה-API. ברגע ש-R עולה הוא יקרא את המשתנה לתוך משתנה סביבה.\nניתן לערוך את הקובץ על ידי שימוש בפקודה הבאה: usethis::edit_r_environ().\nהנה דוגמה לקובץ Renviron שמכיל מפתח לשימוש ב-OpenAI:\n# Example for a .Renviron file\nOPENAI_API_KEY = \"***** ADD YOUR SECRET OPENAI KEY HERE *****\"\nניתן להוסיף מפתחות לשירותים נוספים בשורה חדשה (לדוגמה עבור מודל קלוד של אנטרופיק, הגדירו משתנה ANTHROPIC_API_KEY).\nאת ערכיהם של המשתנים הגלובליים ניתן לקרוא על ידי שימוש בפקודה Sys.getenv(\"OPENAI_API_KEY\") אבל בפועל לא תצטרכו כי הפקודות של החבילה יודעות לחפש אותם לבד, ברגע שהם נקראו לסביבה.\nכדי להשיג מפתח לשימוש, עליכם לקחת אותו מממשק השליטה של השירות שבו אתם משתמשים (לדוגמה ב-OpenAI צריך לעשות הרשמה קצרה כמפתח developer ולתת מספר כרטיס אשראי. בדרך מקבלים סכום התחלתי מרשים של קרדיטים לשימוש חינמי).\n\n\n\n\n\n\nשימוש בקבצי `gitignore`\n\n\n\nאם אתם משתמשים ב-git, מומלץ לוודא שיש לכם גם קובץ gitignore, ושהוא מכיל שורה שכתוב בה Renviron על מנת שהקוד הסודי לא יעלה ל-repository בטעות (וזה במיוחד חשוב אם אתם עובדים על repository ציבורי, אחרת עלולים להשתמש במפתחות שלכם ותחויבו על השימושים הללו). להלן דוגמה לקובץ זה, הכוללת המלצות נוספות שקשורות בפרויקטי R:\n# Example for .gitignore file  \n# Ignore global environment variables \n.Renviron  \n\n# History files \n.Rhistory \n.Rapp.history  \n\n# Session Data files \n.RData  \n\n# User-specific files \n.Ruserdata  \n\n# RStudio internal project files \n.Rproj.user/ \n\n\nכעת נציג דוגמה להפעלת צ’ט ולאחר מכן נסביר בפירוט על הפקודות של החבילה.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>הפעלת מודלי שפה (LLMs)</span>"
    ]
  },
  {
    "objectID": "11-using-llms.html#היסטוריה-מנוהלת",
    "href": "11-using-llms.html#היסטוריה-מנוהלת",
    "title": "11  הפעלת מודלי שפה (LLMs)",
    "section": "11.3 היסטוריה מנוהלת",
    "text": "11.3 היסטוריה מנוהלת\nהיופי שבחבילת ellmer זה שהיא מייצרת ממשק מאוד נוח לצ’ט, והיא מנהלת את היסטורית השיחה עבורנו. לדוגמה שתי שיחות דומות, באחת יש יותר הסטוריה מהשניה:\nבשתי הדוגמאות אנחנו מאתחלים את הצ’ט עם פרומפט בסיסי (אפילו בסיסי מדי) שאומר למודל לענות כמיטב יכולתו. ההבדל בין הדוגמאות הוא שבצד ימין הוספנו הנחיה “מעכשיו אתה קפטן פיקארד” ואז שאלנו אותו מה התאריך, ולעומת זאת בצד שמאל ישר שאלנו אותו מה התאריך.\nבשני המקרים השאלה של “מה התאריך” עומדת, לכאורה, בפני עצמה - כלומר בפקודה נפרדת, אבל ניתן לראות שהאובייקט chat מכיל את ההיסטוריה, ולכן בצד ימין עונה כמו קפטן פיקארד. ה-API כמובן לא מחובר לשעון כלשהו ולכן לא עונה בפועל על השאלה.\nכל הרצה נוספת של chat$chat מעלה למעשה את כל ההיסטוריה של השאלות ושל התשובות שניתנו בחזרה ל-API שעמו אנחנו מתקשרים וכך התשובה תמיד שומרת על ההקשר הרלוונטי של השיחה.\n\n\nchat &lt;- \n    chat_openai(\n        \"Answer the best you can\"\n        )\n# Using model = \"gpt-4o\".\nchat$chat(\"מעכשיו אתה קפטן Jean-Luc Picard\")\n#בכבוד רב, אני מקבל את תפקידי כקפטן ז'אן-לוק\n# פיקארד ומברך את כולכם על סיפון האנטרפרייז. \n# האם יש בקשות או שאלות שברצונכם לדון בהן?\n# \"Make it so!\"\nchat$chat(\"איזה יום היום?\")\n#לצערי, אני לא יכול לגשת למידע בזמן אמת \n# או לדעת את התאריך הנוכחי. \n# אבל תמיד אפשר להיעזר בקומוניקטור שלך \n# או בכל לוח שנה זמין. אם יש עוד משהו שאוכל\n# אנא אל תהסס לשאול!\n\n\nchat &lt;- \n    chat_openai(\n        \"Answer the best you can\"\n        )\n# Using model = \"gpt-4o\".\nchat$chat(\"איזה יום היום?\")\n#אני מצטער, אבל אין לי את האפשרות \n#לבדוק את התאריך הנוכחי.\n#אנא בדוק זאת באמצעות \n#מכשיר אחר או לוח שנה.\n\n\nנעבור להסבר מפורט של השימוש בפקודה chat_openai, כאשר פקודות אחרות בחבילה פועלות בפורמט דומה מאוד רק עם מודלים של חברות אחרות.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>הפעלת מודלי שפה (LLMs)</span>"
    ]
  },
  {
    "objectID": "11-using-llms.html#הסבר-מפורט-ל--chat_openai",
    "href": "11-using-llms.html#הסבר-מפורט-ל--chat_openai",
    "title": "11  הפעלת מודלי שפה (LLMs)",
    "section": "11.4 הסבר מפורט ל- chat_openai",
    "text": "11.4 הסבר מפורט ל- chat_openai\nהשלב הראשון בהפעלת הפקודה הוא להגדיר אובייקט שיחה של open ai. ניתן להגדיר מספר אובייקטים שונים למטרות שונות, כאשר כל אובייקט יחזיק הנחיות, מודל, והיסטוריה משל עצמו. לדוגמה:\n\nlibrary(ellmer)\nmy_chat &lt;- chat_openai(\n    system_prompt = \n    \"You are an expert in using R, tidyverse, and ggplot2. \n    Keep your responses concise, provide minimal examples.\",\n    model = \"gpt-4o\",\n)\n\nבפקודה זו הגדרנו אובייקט my_chat שיעשה שימוש במודל “gpt-4o”, וההנחיה הראשונית שלו היא לנהוג כמומחה לשפת R, tidyverse, ו-ggplot2, וכמו כן לשמור על התגובות שלו תמציתיות ועם דוגמאות מינימליות.\nכעת כל הפעלה של המודל תתבצע על ידי הפעלת הפונקציה chat שנמצאת בתוך אובייקט my_chat, באופן הבא:\n\nmy_chat$chat(\"Create an example of a chart using mtcars and ggplot2.\")\n\nפלט הפקודה יהיה:\nCertainly! Here's a simple example of a scatter plot using the `mtcars` \ndataset, showcasing the relationship between miles per gallon (`mpg`) and \nhorsepower (`hp`):\n\n```\n# Load ggplot2\nlibrary(ggplot2)\n\n# Create scatter plot\nggplot(data = mtcars, aes(x = hp, y = mpg)) +\n  geom_point() +\n  labs(title = \"MPG vs Horsepower\",\n       x = \"Horsepower\",\n       y = \"Miles Per Gallon\") +\n  theme_minimal()\n```\n\nThis code will create a scatter plot with points representing each car in the \n The x-axis represents horsepower and the y-axis represents miles per \ngallon.\n\n11.4.1 היסטוריית השיחה\nניתן לצפות בכל ההיסטוריה על ידי קריאה לאובייקט המקורי:\n\nmy_chat\n\n&lt;Chat turns=3 tokens=52/142&gt;\n── system ──────────────────────────────────────────────────────────────────────\nYou are an expert in using R, tidyverse, and ggplot2.  Keep your responses \nconcise, provide minimal examples.\n── user ────────────────────────────────────────────────────────────────────────\nCreate an example of a chart using mtcars and ggplot2.\n── assistant ───────────────────────────────────────────────────────────────────\nCertainly! Here's a simple example of a scatter plot using the `mtcars` \ndataset, showcasing the relationship between miles per gallon (`mpg`) and \nhorsepower (`hp`):\n\n```r \n# Load ggplot2 library(ggplot2)\n\n# Create scatter plot ggplot(data = mtcars, aes(x = hp, y = mpg)) + \ngeom_point() + labs(title = \"MPG vs Horsepower\", x = \"Horsepower\", y = \"Miles \nPer Gallon\") + theme_minimal() \n```\n\nThis code will create a scatter plot with points representing each car in the \ndataset. The x-axis represents horsepower and the y-axis represents miles per \ngallon.\n\n\n11.4.2 חישוב עלויות\nמספר הטוקנים (tokens) יכול לשמש להערכה של עלויות ההרצה. טוקנים שקולים למילים או רכיבי שפה אחרים שמתרגמים לפיצ’רים של המודל.\n\nmy_chat$tokens()\n\n     input output\n[1,]     0      0\n[2,]     0      0\n[3,]    52    142\nלדוגמה, במקרה זה השתמשנו ב-142 טוקנים מסוג פלט (בתשובות המודל) ו-52 טוקנים מסוג קלט, ומכיוון שכל פעם כל היסטוריית הצ’ט נשלחת למודל, הערכים הללו יצטברו:\n\nmy_chat$chat(\"Explain tokens\")\n\nIn R, particularly within the context of data manipulation and visualization \nthe term \"token\" isn't commonly used. However, in \nand data contexts, \"tokens\" can refer to different \nconcepts:\n\n**Programming Context**: Tokens are the smallest units of code that carry \nkeywords, operators, identifiers, and literals. In R, the \n breaks down code into tokens to analyze and execute it.\n\n**Text Analysis**: In text mining, a token is a single element of a text, \n a phrase, that is extracted during the process of tokenization.\nTokenization is the process of breaking text data into individual pieces or \ntokens.\n\n3. **Authentication Context**: A token could refer to a security token in API \nacting as a key that provides access to resources or services.\n\nIf you meant \"tokens\" in relation to another specific context, please provide \nmore details for a more targeted explanation.\n\nmy_chat$tokens()\n\n     input output\n[1,]     0      0\n[2,]     0      0\n[3,]    52    142\n[4,]     0      0\n[5,]   204    199\nבעת כתיבת שורות אלו העלות של gpt-4o היא:\n\n2.5$ למיליון טוקנים של קלט\n10$ למיליון טוקנים של פלט\n\nמה שאומר שסך העלות עד כה עומדת על 0.00405$. העלויות יורדות באופן שוטף כל פעם שיוצאים מודלים חדשים, כך שעד שתקראו שורות אלו יכול להיות שהעלויות ירדו בכמה סדרי גודל. כמו כן ישנם מודלים אחרים שכבר היום ניתן להפעיל וזולים במספר סדרי גודל כמו gpt-4o-mini.\nמומלץ להתאים את המודל לצורך, נניח במקרה של שימוש מאסיבי, כדאי לבחון ראשית האם המודלים הזולים יתנו ביצועים מספקים.\n\n\n11.4.3 ניתוח של תרשימים\nניתן להיעזר בפקודות content_image_url, content_image_plot ו-content_image_file על מנת לקודד תמונה ולהעלות אותה כחלק משיחה עם המודל. חלק מהמודלים אומנו כך שגם ידעו להסביר גרפים או תמונות.\nבמידה ותרצו לקבל הסברים או סיכום של תרשים בצורה אינטראקטיבית (נניח תוך כדי ניתוח), וכבר ייצרתם תרשים, אז ניתן להשתמש ב-content_image_plot ואז התרשים שמוצג בסביבה נלקח ישירות, או לחילופין לקחת אותו מקובץ או url עם אחת משתי הפקודות האחרות.\nלדוגמה הנה הסבר לכריכה של הספר:\n\nmy_chat$chat(\"What do you see in this image?\", \n             content_image_url(\"https://www.hebrewr.co.il/images/hebrewr_book_cover.png\"))\n\nThe image contains text in Hebrew and an illustration of a bird. There's a logo\nat the top, and the text appears to be related to using R.\n\n\n\n\n\n\nשימושים באפליקציות: הפעלה א-סנכרונית של מודלים\n\n\n\nשימוש במודלים עשוי לקחת זמן, לכן אם אנחנו מעוניינים לשלב מודלים בשימושים שדורשים עבודה רציפה ואי-היתקעות של המערכת, עלינו לעבוד באופן א-סנכרוני. חבילת ellmer תומכת גם בהפעלה א-סנכרונית, לדוגמה עם פקודת chat_async, ופקודה זו שימושית כאשר מטמיעים מודלים באפליקציות shiny. עם זאת, לא נדון בהפעלה א-סנכרונית בפרק זה, ובמידת הצורך מומלץ להיעזר בדוגמאות מהתיעוד הרשמי של החבילה.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>הפעלת מודלי שפה (LLMs)</span>"
    ]
  },
  {
    "objectID": "11-using-llms.html#תרגילים",
    "href": "11-using-llms.html#תרגילים",
    "title": "11  הפעלת מודלי שפה (LLMs)",
    "section": "11.5 תרגילים",
    "text": "11.5 תרגילים\n\n\n\n\n\n\nתרגיל: שימוש במודל להסבר תרשים\n\n\n\nהשתמשו באחת מהפונקציות שפועלות על גרפים/תמונות על מנת להסביר את אחד מהתרשימים שהוצגו בפרק 4. באפשרותכם להזין ישירות url מאתר הספר או לשחזר תרשים מסוים באמצעות קוד ולהשתמש בפונקציה content_image_plot.\n\n\n\n\nהמדריך העברי למשתמש ב-R נכתב על ידי עדי שריד בהוצאת מכון שריד\n\n:::",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>הפעלת מודלי שפה (LLMs)</span>"
    ]
  },
  {
    "objectID": "12-hebrew-in-R.html",
    "href": "12-hebrew-in-R.html",
    "title": "12  עברית ב-R",
    "section": "",
    "text": "12.1 שימוש ב-IDE\nה-IDE הנפוץ לשימוש ב-R הוא RStudio IDE (סביבת פיתוח - Integrated Development Environment). שילוב של עברית ב-IDE דורש קצת מיומנות והתרגלות, לדוגמה, כך נראית כתיבת שורות אלו ב-IDE:\nכפי שניתן לראות, למרות שהשורות עצמן בספר מיושרות לימין (כמו שצריך בעברית), בעת הכתיבה השורות לא מיושרות, וסדר המשפט מתהפך כאשר משלבים עברית ואנגלית. בחלק השלישי של הפרק נסביר איך “קורה הקסם” שהתוצר עצמו כן מיושר לימין. אבל הנה כמה טיפים שיעזרו לכם לשלב עברית בעבודה השוטפת עם RStudio:\nלצערנו, העורך הויזואלי זמין רק במסמכים מסוג RMarkdown ו-quarto. בכתיבת סקריפט רגיל (קובץ קוד בלבד עם סיומת .R), חייבים להשתמש בעורך קוד המקור, מה שמוביל אותנו לנקודה השניה:\nlibrary(tidyverse)\nmy_table %&gt;% \n  filter(my_var == \n           \"המשתנה שלי\")\nבמקום הקוד:\nmy_table %&gt;% \n  filter(my_var == \"המשתנה שלי\")\ninit_tbl &lt;- tibble(`שם` = \n                     c(\"איתן\",\n                       \"נעמי\",\n                       \"אביב\"),\n                   `גיל` = \n                     c(11, 9, 5))\ninit_tbl %&gt;% \n  rename(age = `גיל`,\n         name = `שם`)\n\n# A tibble: 3 × 2\n  name    age\n  &lt;chr&gt; &lt;dbl&gt;\n1 איתן     11\n2 נעמי      9\n3 אביב      5\nשימו לב אגב שבפלט הטקסט בעברית מופיע הפוך, אבל העתיקו את הקוד ונסו. ניתן להשתמש בפקודה View על מנת לראות את התוצר הסופי בצורה מסודרת (פשוט הוסיפו %&gt;% View() בסוף השורה האחרונה של הקוד).",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>עברית ב-R</span>"
    ]
  },
  {
    "objectID": "12-hebrew-in-R.html#שימוש-ב-ide",
    "href": "12-hebrew-in-R.html#שימוש-ב-ide",
    "title": "12  עברית ב-R",
    "section": "",
    "text": "כתיבה בעברית ב-RStudio IDE\n\n\n\n\nעבודה עם ה-Visual Editor: בכתיבת מסמכים (מסוג RMarkdown או quarto) לעבוד עם ה-Visual editor במקום ה-Source editor (בצד שמאל למעלה בחירה ב-Visual). איכשהו, העורך הויזואלי מצליח לסדר קצת יותר טוב את העברית, ובמקרה ונדרש לערוך מסמך, מצליח לשים את הסמן במקום הנכון. בצילום המסך הבא מוצג עורך קוד המקור (באדום מסומן הכפתור שמאפשר לעבור לעורך הויזואלי). אם תנסו לשים את הסמן במקום המתאים בעורך קוד המקור תראו שהוא מציב את הסמן במקום הלא נכון.\n\n\n\n\nמעבר לעורך ויזואלי\n\n\n\n\nשימוש בשבירת שורות כשנדרש לשלב עברית בקוד: כאשר כותבים קוד ונדרש לשלב עברית, עדיף לשבור שורה (בכתיבת קוד לרוב שבירת שורה לא משפיעה על הפונקציונליות של הקוד), ואת העברית לשים בשורה נפרדת. זה יקל על עריכת הקוד במידה וצריך. לדוגמה, הקוד הבא מכיל שבירת שורה, ולכן יקל על עריכות במידה ונדרשות:\n\n\n\n\n\n\nשמירת קבצים באנגלית: תעשו לעצמכם ולאחרים טובה, ולכל הקבצים (והתיקיות) תתנו שמות באנגלית ולא בעברית.\nשמות משתנים באנגלית: אם יש לכם קובץ נתונים שבו שמות המשתנים (הכותרות) הם בעברית, מומלץ להעביר את כולם לאנגלית, לעבוד באנגלית, ואם צריך להעביר לעברית בסוף (לצורך דיווח ו/או תרשימים). יש דרכים שונות להחליף שמות, לדוגמה הגדרה בתוך הפקודה שקוראת את הקובץ. הפקודה read_csv ו-readxl::read_excel תומכות שתיהן בארגומנט שנקרא col_names ומאפשר להגדיר שמות (אבל השימוש בארגומנט מניח שסדר העמודות עקבי וידוע מראש). הדוגמה הבאה מחליפה שמות של עמודות באמצעות הפקודה rename, שמגדירה שם של עמודה באופן מדויק, גם אם הסדר שלהן אינו לפי סדר ההגדרה.\n\n\n\n\ninit_tbl\n\n# A tibble: 3 × 2\n  שם      גיל\n  &lt;chr&gt; &lt;dbl&gt;\n1 איתן     11\n2 נעמי      9\n3 אביב      5",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>עברית ב-R</span>"
    ]
  },
  {
    "objectID": "12-hebrew-in-R.html#קידוד-קבצים",
    "href": "12-hebrew-in-R.html#קידוד-קבצים",
    "title": "12  עברית ב-R",
    "section": "12.2 קידוד קבצים",
    "text": "12.2 קידוד קבצים\nקבצי טקסט בפורמטים שונים (כגון txt או csv) יכולים להכיל אינדיקציה לקידוד, שמאפשרת לתוכנות שונות (ביניהן R ו-Excel) להבין איך לפתוח את הקובץ כך שניתן יהיה לקרוא אותו באופן תקין.\n\n12.2.1 קריאת קבצים\nנתייחס לפקודת read_csv (פקודות אחרות בחבילת readr עובדות באופן דומה). כברירת מחדל, הפקודה תצליח לקרוא טוב קבצים ששמורים עם קידוד של UTF-8, ולרוב הקבצים זה מספיק.\nבמידה והקריאה אינה עובדת, ניתן להיעזר בפקודה guess_encoding גם היא מחבילת readr.\nלדוגמה:\n\nguess_encoding(\"files/utf8_encoding_example_file.csv\")\n\n# A tibble: 2 × 2\n  encoding confidence\n  &lt;chr&gt;         &lt;dbl&gt;\n1 UTF-8          1   \n2 KOI8-R         0.98\n\n\nניתן לראות שהפקודה guess_encoding מצליחה לזהות שהקידוד הוא UTF-8, וקריאה “רגילה” של הקובץ (בלי ארגומנטים מיוחדים) תצליח:\n\n\nread_csv(\"files/utf8_encoding_example_file.csv\")\n\n# A tibble: 2 × 1\n  שלום \n  &lt;chr&gt;\n1 יום  \n2 טוב  \n\n\n\nלעומת זאת, הקובץ הבא מקודד בקידוד אחר (קידוד iso8859-8), הפקודה guess_encoding מזהה קידוד שגוי, והשימוש בו לא יניב תוצאות רצויות:\n\nguess_encoding(\"files/iso8859-8_encoding_example_file.csv\")\n\n# A tibble: 1 × 2\n  encoding     confidence\n  &lt;chr&gt;             &lt;dbl&gt;\n1 windows-1251        0.5\n\nread_csv(\"files/iso8859-8_encoding_example_file.csv\", \n         locale = locale(encoding = \"windows-1251\"))\n\n# A tibble: 2 × 1\n  щмен \n  &lt;chr&gt;\n1 йен  \n2 иеб  \n\n\nהקובץ הראשון מקודד ב-UTF-8 ולכן שימוש פשוט בפקודה read_csv קורא אותו באופן תקין. הקובץ השני שמור בפורמט ISO-8859-8 (והפקודה גם לא מצליחה “לנחש” אותו), ולכן יותר מאתגר לקרוא אותו בלי ידע מוקדם על הקידוד. הפעלת פקודת הקריאה על הקובץ השני מבלי הגדרה מתאימה של הקידוד, תציג טקסט שגוי או הודעת שגיאה של Error: Invalid multibyte sequence. הטקסט בעברית בדוגמאות להלן יופיע משמאל לימין (הפוך), אבל אם תנסו להריץ אותו ב-R תראו שהנתונים נקראים באופן תקין, בפקודה הראשונה והשלישית להלן:\n\n\nread_csv(\"files/iso8859-8_encoding_example_file.csv\", \n         locale = locale(encoding = \"ISO-8859-8\"))\n\n# A tibble: 2 × 1\n  שלום \n  &lt;chr&gt;\n1 יום  \n2 טוב  \n\n\n\nלידיעה, יש מספר פורמטים רלוונטיים לקריאת עברית, הראשונים שאני ממליץ לנסות הם UTF-8 (כלומר בלי ארגומנטים מיוחדים), אחריו Windows-1255, ואחריו ISO-8859-8, כמובן תוך שילוב הפקודה guess_encoding שיכולה להיות שימושית לעיתים.\n\n\n12.2.2 שמירת קבצים\nעל מנת לשמור קבצים עם קידוד, מומלץ להשתמש בפקודה write_excel_csv במקום הפקודה write_csv, במיוחד אם מתכננים לקרוא את הקובץ שנשמר באמצעות אקסל. הפקודה של write_excel_csv כוללת “הנחיות קידוד” כך שפתיחה באקסל תציג עברית באופן תקין (התוצר הוא עדיין קובץ טקסט). לעומת זאת, שמירה של write_csv עם נתונים בעברית, תציג ג’יבריש בעת פתיחת אקסל רגילה (אגב, אפשר לייבא נתונים באקסל ולהגדיר UTF-8 כקידוד, ואז ניתן לקרוא גם קבצים כאלו באופן תקין).\n\n\n\n\n\n\nNote\n\n\n\nפורמט אקסל (קובץ xlsx) הוא פורמט נוח מבחינת קידוד, משום שהוא שומר את הקידוד באופן מובנה. עם זאת, הוא פורמט פחות נוח לעבודה בהרבה מקרים. ניתן לקרוא קבצי אקסל באמצעות readxl::read_excel ואז לא צריך להתעסק עם קידוד. שמירה של קבצי אקסל תיעשה באמצעות אחת מהפקודות הבאות openxlsx::write.xlsx או writexl::write_xlsx.\nלא נכביר במילים על הבעיות שיש עם אקסל וקבצי דאטה, אבל לא חסרות כאלו (לדוגמה, ההתייחסות של אקסל לכל דבר שרק “נראה כמו תאריך” כתאריך, הגמישות לתת למשתמשים להפוך את הקובץ ל-untidy כמו לדוגמה על ידי מיזוג תאים, או קידוד משמעויות שונות באמצעות צביעה, מה שכמובן מקשה על עבודת מדען הנתונים).",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>עברית ב-R</span>"
    ]
  },
  {
    "objectID": "12-hebrew-in-R.html#יישור-לימין",
    "href": "12-hebrew-in-R.html#יישור-לימין",
    "title": "12  עברית ב-R",
    "section": "12.3 יישור לימין",
    "text": "12.3 יישור לימין\nתוצרים ב-R המבוססים על html, קרי, מסמכים שהם תוצר של RMarkdown, quarto, ואפליקציות shiny, יציגו עברית בכיוון הפוך (משמאל לימין), אלא אם יוגדר להם עיצוב מתאים.\nעיצוב ב-html נשלט על ידי קוד CSS (Cascade Style Sheet). לדוגמה, לספר זה יש עיצוב המוגדר בקובץ style.css ובו מופיע (בין היתר) הקוד הבא:\n\nbody {\n  direction: rtl;\n}\n\nהקוד שולט בכל התגיות שנמצאות בתוך גוף המסמך (תגיות html שמופיעות בין &lt;body&gt; לבין התגית הסוגרת &lt;/body&gt;. התכונה אותה אנחנו רוצים לעדכן נקראת כיוון (direction), והוא יכול לקבל שני ערכים (כברירת מחדל שמאל לימין ltr, ובאמצעות הקוד אנחנו משנים אותו ל-rtl.\nבשביל להטמיע זאת במסמך quarto או RMarkdown רק צריך להוסיף את הקוד הבא במסמך:\n```{css}\nbody {\n   direction: rtl;\n}\n```\nניתן לקרוא מידע נוסף לגבי שילוב CSS במקורות הבאים:\n\nלגבי שימוש ב-CSS במסמכי quarto\n\nquarto.org\n\nשילוב CSS במסמכי RMarkdown\n\n(Xie, Allaire, and Grolemund 2018)\n\nשילוב CSS באפליקציות Shiny\n\n(Wickham 2021)",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>עברית ב-R</span>"
    ]
  },
  {
    "objectID": "12-hebrew-in-R.html#סיכום",
    "href": "12-hebrew-in-R.html#סיכום",
    "title": "12  עברית ב-R",
    "section": "12.4 סיכום",
    "text": "12.4 סיכום\nבפרק זה למדנו טיפים וטריקים שיעזרו לנו בפרויקטים בהם עלינו לשלב עברית ואנגלית. בפרט:\n\nשימוש בסביבת הפיתוח RStudio תוך שילוב עברית.\nקידודים של קבצים בעברית (בקריאה ובכתיבה של קבצים).\nיישור לימין בתוצרי ניתוח שכוללים html, באמצעות שימוש ב-CSS.\n\n\n\n\nהמדריך העברי למשתמש ב-R נכתב על ידי עדי שריד בהוצאת מכון שריד\n\n\n\n\n\nWickham, Hadley. 2021. Mastering Shiny. \"O’Reilly Media, Inc.\".\n\n\nXie, Yihui, Joseph J Allaire, and Garrett Grolemund. 2018. R Markdown: The Definitive Guide. CRC Press.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>עברית ב-R</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "מקורות",
    "section": "",
    "text": "Hastie, Trevor, Robert Tibshirani, and Jerome Friedman. 2009. The\nElements of Statistical Learning. Springer New York. https://doi.org/10.1007/978-0-387-84858-7.\n\n\nJames, Gareth, Daniela Witten, Trevor Hastie, and Robert Tibshirani.\n2021. An Introduction to Statistical Learning. Springer US. https://doi.org/10.1007/978-1-0716-1418-1.\n\n\nKuhn, Max, and Julia Silge. 2022. Tidy Modeling with r. \"\nO’Reilly Media, Inc.\".\n\n\nMurray, Lori L., and John G. Wilson. 2021. “Generating Data Sets\nfor Teaching the Importance of Regression Analysis.” Decision\nSciences Journal of Innovative Education 19 (2): 157–66. https://doi.org/10.1111/dsji.12233.\n\n\nSimpson, E. H. 1951. “The Interpretation of Interaction in\nContingency Tables.” Journal of the Royal Statistical\nSociety: Series B (Methodological) 13 (2): 238–41. https://doi.org/10.1111/j.2517-6161.1951.tb00088.x.\n\n\nWalpole, Ronald E, Raymond H Myers, Sharon L Myers, and Keying Ye. 1993.\nProbability and Statistics for Engineers and Scientists. Vol.\n5. Macmillan New York.\n\n\nWickham, Hadley. 2010. “A Layered Grammar of Graphics.”\nJournal of Computational and Graphical Statistics 19 (1): 3–28.\nhttps://doi.org/10.1198/jcgs.2009.07098.\n\n\n———. 2021. Mastering Shiny. \"O’Reilly Media, Inc.\".\n\n\nWickham, Hadley, and Garrett Grolemund. 2016. R for Data Science:\nImport, Tidy, Transform, Visualize, and Model Data. \"O’Reilly\nMedia, Inc.\".\n\n\nXie, Yihui, Joseph J Allaire, and Garrett Grolemund. 2018. R\nMarkdown: The Definitive Guide. CRC Press.\n\n\n\n\n\nהמדריך העברי למשתמש ב-R נכתב על ידי עדי שריד בהוצאת מכון שריד",
    "crumbs": [
      "מקורות"
    ]
  }
]