# הפעלת מודלי שפה (LLMs) {#sec-llms}

אחד מהכלים שהתפתחו מאוד בשנים האחרונות ועושים מהפכה של ממש באופן שבו אנחנו חושבים ועובדים, ובמיוחד למי שעובד עם קוד ועם דאטה, הם כלי בינה מלאכותית גנרטיבית בכלל, ומודלי שפה בפרט (Large Language Models, Generative AI).

במקרה של LLMs מדובר במודלים סטטיסטיים שמאומנים על מקבץ טקסט גדול (נניח לדוגמה מודלים שאומנו על חלק ניכר מהעמודים הזמינים באינטרנט), תוך כדי מעורבות אנושית שנותנת פידבק בתהליך הלמידה של המודל. לא ניכנס בפרק זה לתיאוריה של אופן האימון של מודל שפה, אך סביר להניח שכבר נתקלתם במספר מודלים ושימושים שונים.

יש דוגמאות רבות למודלים שונים שזמינים לשימוש בחינם או בתשלום, של ספקים כגון (רשימה חלקית):

-   Open AI עם מודלי ChatGPT
-   Anthropic עם מודלי Claude
-   Google עם מודלי Gemini
-   Meta עם מודלי Llama
-   AWS עם תשתית מודלים בשירות שנקרא (Bedrock)

הרשימה ממשיכה, גדולה מאוד, וגדלה מיום ליום. מרבית המודלים לעיל הם מודלים מבוססים צ'ט (נותנים תחושה של שיחה). בפועל מה שהמודלים עושים זה לתת חיזוי למילה הבאה בכל פעם, וכך הם יוצרים משפטים, שהופכים לפסקאות, ולטקסטים מורכבים. ישנם כמובן מודלים שעושים משימות שונות כמו ליצור תמונה או סרט.

## התקנת `ellmer`

ישנה תיאוריה ופרקטיקה נרחבת על אופן השימוש, ההפעלה, וההתאמה של מודלים לצרכים שונים. בפרק זה נדגים את השימוש בחבילה שנקראת `ellmer` ומאפשרת להתממשק מתוך R למנעד של מודלים נפוצים. נדגים את השימוש בחבילה באמצעות מודלי Open AI, אך באופן דומה ניתן להשתמש בהתממשקות עם מודלים של ספקים אחרים.

נציין גם שטכניקה נוספת אפשרית היא להשתמש בחבילת `openai` של R, ואפשר גם להשתמש בחבילות Python ייעודיות על ידי התממשקות של חבילת `reticulate` שאותה ראינו בפרק הקודם.

כאמור, נמשיך את ההדגמה בחבילת `ellmer`. בעת כתיבת שורות אלו, החבילה אינה זמינה ב-CRAN ועל מנת להתקינה יש להשתמש בחבילת `remotes` באופן הבא:

```{r explain install}
#| eval: false
remotes::install_github('tidyverse/ellmer')
# When the package will be deployed to CRAN use instead:
# install.packages('ellmer')
library(ellmer)
```

## הגדרת המפתחות

לפני שאנחנו מתחילים לעבוד עם החבילה, מומלץ לפתוח קובץ עם סיומת `.Renviron` בתיקיית העבודה, שיכיל את המפתחות הנדרשים להפעלה של ה-API. ברגע ש-R עולה הוא יקרא את המשתנה לתוך משתנה סביבה.

הנה דוגמה לקובץ `.Renviron` שמכיל מפתח לשימוש ב-OpenAI:

```         
OPENAI_API_KEY = "***** ADD YOUR SECRET OPENAI KEY HERE *****"
```

ניתן להוסיף מפתחות לשירותים נוספים בשורה חדשה. את ערכיהם של המשתנים הגלובליים ניתן לקרוא על ידי שימוש בפקודה `Sys.getenv("OPENAI_API_KEY")` אבל בפועל לא תצטרכו כי הפקודות של החבילה יודעות לחפש אותם לבד, ברגע שהם נקראו לסביבה.

כדי להשיג מפתח לשימוש, עליכם לקחת אותו מממשק השליטה של השירות שבו אתם משתמשים (לדוגמה ב-OpenAI צריך לעשות הרשמה קצרה כמפתח developer ולתת מספר כרטיס אשראי. בדרך מקבלים סכום התחלתי מרשים של קרדיטים לשימוש חינמי).

אם אתם משתמשים ב-git, מומלץ לוודא שיש לכם גם קובץ `.gitignore`, ושהוא מכיל שורה שכתוב בה `.Renviron` על מנת שהקוד הסודי לא יעלה ל-repository בטעות (וזה במיוחד חשוב אם אתם עובדים על repository ציבורי, אחרת עלולים להשתמש במפתחות שלכם ותחויבו על השימושים הללו).

כעת נציג דוגמה להפעלת צ'ט ולאחר מכן נסביר בפירוט על הפקודות של החבילה.

## הפעלת צ'ט - דוגמה

היופי שבחבילת `ellmer` זה שהיא מייצרת ממשק מאוד נוח לצ'ט, והיא מנהלת את היסטורית השיחה עבורנו. לדוגמה, הנה שתי דוגמאות, אחת שכוללת היסטורית שיחה והשניה ללא היסטוריה.

בשתי הדוגמאות אנחנו מאתחלים את הצ'ט עם פרומפט בסיסי (אפילו בסיסי מדי) שאומר למודל לענות כמיטב יכולתו. ההבדל בין הדוגמאות הוא שבצד ימין הוספנו הנחיה "מעכשיו אתה קפטן פיקארד" ואז שאלנו אותו מה התאריך, ולעומת זאת בצד שמאל ישר שאלנו אותו מה התאריך.

בשני המקרים השאלה של "מה התאריך" עומדת, לכאורה, בפני עצמה - כלומר בפקודה נפרדת, אבל ניתן לראות שהאובייקט `chat` מכיל את ההיסטוריה, ולכן בצד ימין עונה כמו קפטן פיקארד. ה-API כמובן לא מחובר לשעון כלשהו ולכן לא עונה בפועל על השאלה.

כל הרצה נוספת של `chat$chat()` מעלה למעשה את כל ההיסטוריה של השאלות ושל התשובות שניתנו בחזרה ל-API שעמו אנחנו מתקשרים וכך התשובה תמיד שומרת על ההקשר הרלוונטי של השיחה.

::: side-by-side
```{r example gpt-4o}
#| include: true
#| eval: false

chat <- 
    chat_openai(
        "Answer the best you can"
        )
# Using model = "gpt-4o".
chat$chat("מעכשיו אתה קפטן Jean-Luc Picard")
#בכבוד רב, אני מקבל את תפקידי כקפטן ז'אן-לוק
# פיקארד ומברך את כולכם על סיפון האנטרפרייז. 
# האם יש בקשות או שאלות שברצונכם לדון בהן?
# "Make it so!"
chat$chat("איזה יום היום?")
#לצערי, אני לא יכול לגשת למידע בזמן אמת 
# או לדעת את התאריך הנוכחי. 
# אבל תמיד אפשר להיעזר בקומוניקטור שלך 
# או בכל לוח שנה זמין. אם יש עוד משהו שאוכל
# אנא אל תהסס לשאול!
```

```{r example2 gpt-4o}
#| include: true
#| eval: false

chat <- 
    chat_openai(
        "Answer the best you can"
        )
# Using model = "gpt-4o".
chat$chat("איזה יום היום?")
#אני מצטער, אבל אין לי את האפשרות 
#לבדוק את התאריך הנוכחי.
#אנא בדוק זאת באמצעות 
#מכשיר אחר או לוח שנה.
```
:::